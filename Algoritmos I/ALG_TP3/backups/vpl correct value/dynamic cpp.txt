#include "dynamic.hpp"
#include <vector>
#include <iostream>
#include <limits>

using namespace std;

const int INF = numeric_limits<int>::max();

// Função auxiliar para resolver o TSP usando programação dinâmica
int tsp(int mask, int pos, vector<vector<int>> &dist, vector<vector<int>> &dp, int n) {
    if (mask == (1 << n) - 1) {
        return dist[pos][0]; // Retorna à cidade inicial
    }
    if (dp[mask][pos] != -1) {
        return dp[mask][pos];
    }
    
    int ans = INF;
    for (int city = 0; city < n; city++) {
        if ((mask & (1 << city)) == 0 && dist[pos][city] != INF) {
            int newAns = dist[pos][city] + tsp(mask | (1 << city), city, dist, dp, n);
            ans = min(ans, newAns);
        }
    }
    return dp[mask][pos] = ans;
}

// Função principal para resolver o TSP
pair<int, vector<int>> solveTSPDynamic(Graph &g) {
    int n = g.n_vertices;
    vector<vector<int>> dist = g.getMatrix();
    vector<vector<int>> dp(1 << n, vector<int>(n, -1));
    
    // Calculando o menor custo
    int minCost = tsp(1, 0, dist, dp, n);
    
    // Reconstrução do caminho
    vector<int> path;
    int mask = 1, pos = 0;

    while (mask != (1 << n) - 1) {
        path.push_back(pos);
        int nextCity = -1, bestCost = INF;

        for (int city = 0; city < n; city++) {
            if ((mask & (1 << city)) == 0 && dist[pos][city] != INF) {
                int cost = dist[pos][city] + dp[mask | (1 << city)][city];
                if (cost == dp[mask][pos]) { // Verifica se este é o caminho correto
                    bestCost = cost;
                    nextCity = city;
                    break;
                }
            }
        }

        if (nextCity == -1) break;
        pos = nextCity;
        mask |= (1 << pos);
    }

    path.push_back(0); // Retorna à cidade inicial

    return {minCost, path};
}
